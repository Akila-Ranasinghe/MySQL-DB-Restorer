package UI;

import Controllings.Aero;
import javax.swing.JOptionPane;

/**
 *
 * @author Akila
 */
public class ProgressAnimator extends javax.swing.JDialog {

    public ProgressAnimator(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        new Aero().enableAero(this);
        Loading();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Restore on progress....");
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/spinner.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgressAnimator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgressAnimator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgressAnimator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgressAnimator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProgressAnimator dialog = new ProgressAnimator(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void Loading() {

        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    for (int i = 0; i < 2; i++) {
                        if (i == 1) {
                            ExecuteRestore();
                        }
                    }
                    Thread.currentThread().sleep(1);

                } catch (Exception e) {
                }
            }
        }).start();
    }

    private void ExecuteRestore() {
        try {
            String exe = "C:/Program Files (x86)/MySQL/MySQL Server " + MainUI.jCombo_sqlVersion.getSelectedItem().toString() + "/bin/mysql.exe";
            if (MainUI.jCombo_sqlVersion.getSelectedItem().toString().equals("5.6")) {
                exe = "C:/Program Files/MySQL/MySQL Server " + MainUI.jCombo_sqlVersion.getSelectedItem().toString() + "/bin/mysql.exe";
            }

            String us = MainUI.txt_user.getText();
            String pas = MainUI.txt_pass.getText();
            String path = MainUI.txt_DBFilePath.getText();
            restoreDatabase(exe, us, pas, path);

            this.dispose();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean restoreDatabase(String exe, String dbUserName, String dbPassword, String source) {

        String[] executeCmd = new String[]{exe, "--user=" + dbUserName, "--password=" + dbPassword, "-e", "source " + source};

        Process runtimeProcess;
        try {
            runtimeProcess = Runtime.getRuntime().exec(executeCmd);
            int processComplete = runtimeProcess.waitFor();

            if (processComplete == 0) {
                JOptionPane.showMessageDialog(this, "The Restore operation was finished successfully.\n\nThe File: " + source + " has been restored.");
                MainUI.txt_DBFilePath.setText(null);
                return true;
            } else {
                JOptionPane.showMessageDialog(this, "The Restore operation was faild.\n\nThe File: " + source + " has been corrupted or not suitable for execute.\n", "Message", 0);
            }
        } catch (Exception ex) {
            System.err.println(ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "ERROR", 0);
        }
        return false;

    }

}
